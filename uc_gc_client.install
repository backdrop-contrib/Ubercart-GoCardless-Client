<?php

/**
 * @file
 * Install, update, and uninstall functions for the module.
 */

/**
 * Implements hook_install().
 */
function uc_gc_client_install() {
  config_set('uc_gc_client.settings', 'warnings_email', config_get('system.core', 'site_mail'));
  $countries = uc_gc_client_countries_define();
  config_set('uc_gc_client.settings', 'countries', $countries);
  $format = array(
    'label' => 'GoCardless',
    'pattern' => 'Y-m-d',
    'module' => 'uc_gc_client',
    'hidden' => 0,
  );
  config_set('system.date', 'formats.gocardless', $format);
  //backdrop_static_reset('system_get_date_formats');

  // Provide 'Interval' attribute and set of options.
  $attributes = db_select('uc_attributes', 'a')
    ->fields('a')
    ->condition('name', 'Interval')
    ->execute()->fetch();

  if (!$attributes) {
    $insert_att = db_insert('uc_attributes')
      ->fields(array(
        'name' => 'Interval',
        'label' => 'Payment interval',
        'ordering' => 0,
        'required' => 1,
        'display' => 1,
        'description' => 'How often would you like to pay your direct debit?',
      ))
      ->execute();

    $options = array('Weekly', 'Fortnightly', 'Monthly', 'Yearly');
    foreach ($options as $option) {
      db_insert('uc_attribute_options')
        ->fields(array(
          'aid' => $insert_att,
          'name' => $option,
          'cost' => 0,
          'price' => 0,
          'weight' => 0,
          'ordering' => 0,
        ))
        ->execute();
    }
  }

  // Add order statuses.
  $t = get_t();
  db_merge('uc_order_statuses')
    ->key(array('order_status_id' => 'mandate_active'))
    ->insertFields(array(
      'order_status_id' => 'mandate_active',
      'title' => $t('GoCardless mandate active'),
      'state' => 'post_checkout',
      'weight' => 7,
      'locked' => 1,
    ))
    ->updateFields(array(
      'state' => 'post_checkout',
      'locked' => 1,
    ))
    ->execute();
  db_merge('uc_order_statuses')
    ->key(array('order_status_id' => 'mandate_failed'))
    ->insertFields(array(
      'order_status_id' => 'mandate_failed',
      'title' => $t('GoCardless mandate failed'),
      'state' => 'post_checkout',
      'weight' => 8,
      'locked' => 1,
    ))
    ->updateFields(array(
      'state' => 'post_checkout',
      'locked' => 1,
    ))
    ->execute();
  db_merge('uc_order_statuses')
    ->key(array('order_status_id' => 'gocardless_payment_failed'))
    ->insertFields(array(
      'order_status_id' => 'gocardless_payment_failed',
      'title' => $t('GoCardless payment failed'),
      'state' => 'post_checkout',
      'weight' => 9,
      'locked' => 1,
    ))
    ->updateFields(array(
      'state' => 'post_checkout',
      'locked' => 1,
    ))
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function uc_gc_client_uninstall() {
}

/**
 * Implements hook_schema().
 */
function uc_gc_client_schema() {
  $schema['uc_gc_client'] = array(
    'description' => 'Stores data on GoCardless orders',
    'fields' => array(
      'ucid' => array(
        'description' => 'Ubercart order ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ucpid' => array(
        'description' => 'Ubercart product ID',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'gcid' => array(
        'description' => 'The GoCardless mandate ID',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'gcrid' => array(
        'description' => 'The GoCardless Redirect flow ID associated with order',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'gccid' => array(
        'description' => 'The GoCardless Customer ID associated with order',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Customerâ€™s user ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'next_payment' => array(
        'description' => 'Timestamp for the next payment',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'next_payment_uuid' => [
        'description' => 'Unique identifier for the next payment',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
      ],
      'type' => array(
        'description' => 'Subscription or One-off payment',
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
        'default' => 'S',
      ),
      'status' => array(
        'description' => 'The GoCardless mandate status',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'Unix timestamp when the order was created',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start_date' => array(
        'description' => 'Unix timestamp when the first payment is charged',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'Unix timestamp when the Status was updated',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sandbox' => array(
        'description' => 'Whether or not it is a sandbox transaction',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'primary index' => array('gcid', 'ucpid'),
    ),
  );
  $schema['uc_gc_client_products'] = array(
    'description' => 'GoCardless information for uc_products',
    'fields' => array(
      'nid' => array(
        'description' => 'The node ID for the product',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Subscription or pre-authorization',
        'type' => 'varchar',
        'length' => '1',
        'not null' => FALSE,
      ),
      'price_x' => array(
        'description' => 'Subscription multiplier',
        'type' => 'numeric',
        'not null' => TRUE,
        'default' => 1,
        'precision' => '6',
        'scale' => '3',
      ),
      'start_date' => array(
        'description' => 'Optional start date for new mandate',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'interval_length' => array(
        'description' => 'The interval between scheduled payment creations',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'interval_unit' => array(
        'description' => 'The interval unit between scheduled payment creations',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'raise_payment' => array(
        'description' => 'Raise payment immediately upon completion of checkout',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nid'),
  );
  $schema['uc_gc_client_schedules'] = array(
    'description' => 'Schedules table',
    'fields' => array(
      'sid' => array(
        'description' => 'Schedule ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'ucid' => array(
        'description' => 'Order ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'ucpid' => array(
        'description' => 'Product ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of scheduled event',
        'type' => 'varchar',
        'length' => '16',
        'not null' => TRUE,
      ),
      'date' => array(
        'description' => 'A formatted date string for the scheduled event',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'The timestamp for the scheduled event',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The status of the schedule',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Available for serialized data by other modules',
        'type' => 'blob',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'Timestamp when scheduled event was created',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('sid'),
    'indexes' => array(
      'timestamp' => array('timestamp'),
      'type' => array('type'),
      'ucid' => array('ucid', 'ucpid'),
    ),
  );
  $schema['uc_gc_client_schedules_adjs'] = array(
    'description' => 'Scheduled adjustments table',
    'fields' => array(
      'aid' => array(
        'description' => 'The Scheduled Adjustment ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => 'The Schedule ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'An optional  title for the Scheduled Adj',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'amount' => array(
        'description' => 'The amount of the Scheduled Adj',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '10',
        'scale' => '2',
      ),
    ),
    'primary key' => array('aid'),
    'indexes' => array(
      'sid' => array('sid'),
    ),
  );
  return $schema;
}
