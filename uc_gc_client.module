<?php

/**
 * @file
 * Provides an integration with GoCardless.com for the Ubercart module
 */

require_once dirname(__FILE__) . '/uc_gc_client.admin.inc';
require_once dirname(__FILE__) . '/uc_gc_client.partner.inc';
require_once dirname(__FILE__) . '/uc_gc_client.mandates.inc';
require_once dirname(__FILE__) . '/uc_gc_client.tools.inc';
// If (module_exists('uc_recurring')) require_once dirname(__FILE__) . '/uc_gcsubs.recurring.inc';.
if (module_exists('rules')) {
  require_once dirname(__FILE__) . '/uc_gc_client.rules.inc';
}

/**
 * Implements hook_menu()
 */
function uc_gc_client_menu() {

  $items['cart/gc_client/complete'] = array(
    'title' => 'GoCardless redirect',
    'page callback' => 'uc_gc_client_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_gc_client.pages.inc',
  );
  $items['gc_client/webhook'] = array(
    'title' => 'GoCardless webhooks',
    'page callback' => 'uc_gc_client_webhook',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_gc_client.pages.inc',
  );
  $items['gc_client/connect'] = array(
    'title' => 'GoCardless Client connect',
    'page callback' => 'uc_gc_client_connect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_gc_client.partner.inc',
  );
  $items['admin/store/orders/%uc_order/gocardless'] = array(
    'title' => 'GoCardless',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gc_client_payments_form', 3),
    'access arguments' => array('edit orders'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'uc_gc_client.mandates.inc',
  );
  $items['gc_client/scheduled_action'] = array(
    'page callback' => 'uc_gc_client_scheduled_action',
    'access arguments' => array('edit orders'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_gc_client.mandates.inc',
  );
  $items['gc_client/schedules/autocomplete'] = array(
    'page callback' => 'uc_gc_client_schedules_autocomplete',
    'access arguments' => array('edit orders'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_gc_client.mandates.inc',
  );
  $items['admin/store/products/price_shift_tool'] = array(
    'title' => 'Price shift tool for GoCardless',
    'description' => 'Bulk price changing tool for existing GoCardless',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gc_client_priceshift_form'),
    'access arguments' => array('edit orders'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_gc_client.tools.inc',
  );
  $items['admin/store/settings/countries/gocardless'] = array(
    'title' => 'GoCardless',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gc_client_countries_form'),
    'access arguments' => array('edit orders'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'uc_gc_client.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Removes the Payments tab from an order's View pane if the module is
 * configured to do this on the settings form.
 */
function uc_gc_client_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (variable_get('uc_gc_client_payments_tab', 0)) {
    if (strpos($root_path, 'admin/store/orders/%') !== FALSE) {
      $order = uc_order_load(arg(3));
      if ($order->payment_method == 'gc_client') {
        if (isset($data['tabs'][0])) {
          foreach ($data['tabs'][0]['output'] as $key => $output) {
            if ($output['#link']['title'] == 'Payments') {
              unset($data['tabs'][0]['output'][$key]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_date_format_types().
 */
function uc_gc_client_date_format_types() {
  return array(
    'gocardless' => t('GoCardless'),
  );
}

/**
 * Implements hook_date_formats().
 */
function uc_gc_client_date_formats() {
  return array(
    array(
      'type' => 'gocardless',
      'format' => 'Y-m-d',
    ),
  );
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_gc_client_uc_payment_method() {

  $methods[] = array(
    'id' => 'gc_client',
    'name' => t('GoCardless'),
    'title' => t('Direct Debit with GoCardless'),
    'desc' => t('Connect with GoCardless as a client of ..'),
    'callback' => 'uc_gc_client_uc_payment_method_callback',
    'weight' => 1,
    'checkout' => FALSE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Implements hook_element_info().
 */
function uc_gc_client_element_info() {

  $types = array();
  $types['uc_gc_client_address'] = array(
    '#input' => TRUE,
    '#required' => TRUE,
    '#process' => array('uc_gc_client_process_address_field'),
    '#attributes' => array('class' => array('uc-store-address-field')),
    '#theme_wrappers' => array('container'),
    '#key_prefix' => '',
    '#hidden' => FALSE,
  );
  return $types;
}

/**
 * Element process hook for address fields.
 */
function uc_gc_client_process_address_field($element, $form_state) {

  
  $uc_countries = db_select('uc_countries', 'u')
    ->fields('u')
    ->condition('version', 0, '>')
    ->execute()->fetchAllAssoc('country_iso_code_2');

  $gc_countries = variable_get('uc_gc_client_countries');
  $enabled_countries = array();
  foreach($gc_countries as $gc_code => $gc_country) {
    if ($gc_country['enabled'] && isset($uc_countries[$gc_code])) {
      $enabled_countries[$uc_countries[$gc_code]->country_id] = $uc_countries[$gc_code]->country_name;
    }
  }

  $element = uc_store_process_address_field($element, $form_state);
  $element[$element['#key_prefix'] . '_country']['#options'] = $enabled_countries;
  return $element;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function uc_gc_client_form_uc_cart_checkout_form_alter(&$form, &$form_state, $form_id) {

  if (($order_id = intval($_SESSION['cart_order'])) > 0) {

    $order = uc_order_load($order_id);

    if ((isset($form['panes']['payment']) && count($form['panes']['payment']['payment_method']['#options']) <= 1) || !isset($form['panes']['payment'])) {
      $order->payment_method = 'gc_client';
      uc_order_save($order);
    }

    if ($order->payment_method == 'gc_client') {

      //Change the address fieldsets to a bespoke type that has countries
      //filtered to only include GC enabled countries.
      //if (variable_get('uc_gc_client_currencies')) {
        if (isset($form['panes']['delivery']))
          $form['panes']['delivery']['address']['#type'] = 'uc_gc_client_address';
        if (isset($form['panes']['billing']))
          $form['panes']['billing']['address']['#type'] = 'uc_gc_client_address';
      //}

      //Optional checkout review selected. (This should only be selected
      //if GC is the only enabled payment method.)
      if (variable_get('uc_gc_client_optional_checkout_review', FALSE)) {

        $form['actions']['continue']['#value'] = variable_get('uc_gc_client_checkout_label');
        $form['#submit'][] = 'uc_gc_client_checkout_form_submit';
      }
    } 
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uc_gc_client_form_uc_cart_checkout_review_form_alter(&$form, &$form_state, $form_id) {

  // Optional checkout not selected.
  if (($order_id = intval($_SESSION['cart_order'])) > 0) {

    $order = uc_order_load($order_id);

    //This allows you to omit the Payment method pane, and is safe because
    //you would only do if you had just one payment method enabled.
    if (!isset($order->payment_method) || empty($order->payment_method)) {
      $order->payment_method = 'gc_client';
      uc_order_save($order);
    }

    if ($order->payment_method == 'gc_client') {
      $form['actions']['submit']['#access'] = FALSE;
      $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
      $checkout_review_form = drupal_get_form('uc_gc_client_checkout_review_form', $order);
      $suffix = '</td><td>' . drupal_render($checkout_review_form) . '</td></tr></table>';
      $form['#suffix'] = $suffix;
    }
  }
}

/**
 * Handles form submission when Optional Checkout Review is selected.
 */
function uc_gc_client_checkout_form_submit($form, $form_state) {
  uc_gc_client_form_submit($form, $form_state);
}

/**
 * Implements hook_form().
 *
 * Returns the elements for the checkout review form.
 */
//function uc_gc_client_checkout_review_form($form_state, $order = FALSE) {
function uc_gc_client_checkout_review_form($form_state, $order) {

  $order_id = $order['build_info']['args']['0']->order_id;
  $mandate_details = uc_gc_client_mandate_details($order);
  $form['mandate_details'] = array(
    '#type' => 'value',
    '#value' => $mandate_details,
  );
  $form['order_id'] = array(
    '#type' => 'value',
    '#value' => $order_id,
  );

  // Provide a submit button for the Checkout review form.
  $form['gocardless_link'] = array(
    '#type' => 'submit',
    '#value' => variable_get('uc_gc_client_checkout_label', t('Order')),
  );
  $form['#submit'][] = 'uc_gc_client_checkout_form_submit';
  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * Submit the checkout review form and redirect to Partner site to
 * begin the Direct Debit setup flow.
 */
function uc_gc_client_form_submit($form, $form_state) {

  if (isset($form_state['values']['mandate_details'])) {
    $mandate_details = $form_state['values']['mandate_details'];
    $order_id = $form_state['values']['order_id'];
  }
  else {
    $order = $form_state['storage']['order'];
    $order_id = $order->order_id;
    $mandate_details = uc_gc_client_mandate_details($order);
  }
  
  $auth = uc_gc_client_authenticate();
  if ($auth == 200) {
    $data = array(
      'endpoint' => 'redirect_flows',
      'action' => 'create',
      'mandate_details' => $mandate_details,
      'order_id' => $order_id,
    );
    $result = uc_gc_client_post($data);
    drupal_goto($result->response);
  }
  else {
    drupal_set_message(t('Something went wrong with authentication'), 'error');
  }
}

/**
 * Returns an array of mandate details.
 *
 * Mandate details are passed on to GoCardless Redirect Flows endpoint.
 */
function uc_gc_client_mandate_details($order) {

  global $base_url;

  // Depending on if Optional Checkout Review is selected.
  if (is_array($order)) {
    $order = $order['build_info']['args']['0'];
  }

  $fields = array(
    'first_name',
    'last_name',
    'company',
    'street1',
    'street2',
    'city',
    'postal_code',
    'country',
  );

  foreach ($fields as $field) {
    !empty($order->{'billing_' . $field}) ? $$field = $order->{'billing_' . $field} : $$field = $order->{'delivery_' . $field};
  }

  $country_code = db_select('uc_countries', 'c')
    ->fields('c', array('country_iso_code_2'))
    ->condition('country_id', $country)
    ->execute()->fetchField();

  $valid_countries = variable_get('uc_gc_client_countries');
  if (!isset($valid_countries[$country_code])) {
    drupal_set_message(t('Sorry, this country is not avaialable to GoCardless right now.'),'warning');
    drupal_goto($_SERVER['HTTP_REFERER']);
  }

  // Generate the mandate_details array.
  $mandate_details = array(
    'name'              => 'Order ' . check_plain($order->order_id),
    'user'              => array(
      'first_name'        => check_plain($first_name),
      'last_name'         => check_plain($last_name),
      'email'             => $order->primary_email,
      'company_name'      => $company,
      'billing_address1'  => $street1,
      'billing_address2'  => $street2,
      'billing_town'      => $city,
      'billing_postcode'  => $postal_code,
      'billing_country'  => $country_code,
    ),
  );

  variable_get('uc_gc_client_sandbox') ? $ext = '_sandbox' : $ext = '_live';
  $mandate_details['redirect_uri'] = variable_get('uc_gc_client_partner_url') . '/gc_partner/mandate?org_id=' . variable_get('uc_gc_client_org_id' . $ext) . '&order_id=' . $order->order_id . '&payment_method=' . $order->payment_method;

  // Provide a hook so that mandate details can be altered by another module.
  drupal_alter('mandate_details', $mandate_details, $order->order_id);

  return $mandate_details;
}

/**
 * Returns a start date for new payments.
 *
 * Based on GC settings for and whether a valid start date is specified
 * for a product.
 * For one-off payments this will be used as the charge_date.
 * For subscriptions it will provide the start_date.
 */
function uc_gc_client_start_date() {

  $doms = variable_get('uc_gc_client_dom');
  if (empty($doms)) {
    return;
  }
  else {
    // Create a sequential array of available dates and return the soonest.
    $est_charge_date = uc_gc_client_working_days_calculate('+', 4, date('Y-m-d'));
    $doms = explode(', ', $doms);
    $dates = array();
    foreach ($doms as $dom) {
      $dom >= date('d', strtotime($est_charge_date)) ? $month = 'last' : $month = 'this';
      $time = strtotime('+' . $dom . ' days', strtotime('last day of ' . $month . ' month'));
      $dates[] = $time;
    }
    sort($dates);
    return $date = array_shift($dates);
  }
}

/**
 * Implements hook_uc_checkout_complete().
 *
 *  For anonymous checkouts update the uid from 0 in the uc_gcsubs table.
 */
function uc_gc_client_uc_checkout_complete($order, $account) {

  if (isset($order->data['new_user'])) {
    $update = db_update('uc_gc_client')
      ->fields(array(
        'uid' => $order->uid,
      ))
      ->condition('ucid', $order->order_id, '=')
      ->execute();
  }
}

/**
 * Implements hook_uc_add_to_cart_data().
 *
 *  Adds extra information to a cart item's "data" array.
 */
function uc_gc_client_uc_add_to_cart_data($form_values) {

  $nid = $form_values['nid'];
  $extras = db_select('uc_gc_client_products', 'p')
    ->fields('p')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAssoc();

  // Set the interval_params length and unit from the Interval attribute.
  if (isset($form_values['attributes'])) {
    $attributes = $form_values['attributes'];
    foreach ($form_values['node']->attributes as $att_value) {
      if ($att_value->name == 'Interval') {
        $option_id = $attributes[$att_value->aid];
        if(isset($option_id)) $attr_option = $att_value->options[$option_id]->name;
      }
    }
  }
  if (isset($attr_option)) {
    $interval_params = uc_gc_client_interval_params($attr_option);
  }
  elseif (isset($extras['interval_length'])) {
    $interval_params = array(
      'length' => $extras['interval_length'],
      'unit' => $extras['interval_unit'],
      'string' => $extras['interval_length'] . ' ' . $extras['interval_unit'],
      'unit_gc' => $extras['interval_unit'] . 'ly',
    );
  }
  
  // Add GC type.
  if (isset($extras['type'])) {
    $extras['type'] == 'S' ? $gc_type = 'subscription' : $gc_type = 'payment';
  }
  else {
    $gc_type = NULL;
  }

  $data = array(
    'gc_auth_type' => $gc_type,
    'price_x' => $extras['price_x'],
    'interval_params' => isset($interval_params) ? $interval_params : NULL,
  );
  return $data;
}

/**
 * Returns an array of interval params.
 *
 * @param string $option
 *   The interval type.
 *
 * @return array
 *   Length and unit interval parameters.
 */
function uc_gc_client_interval_params($option) {

  switch ($option) {

    case 'Yearly':
      $interval_params = array(
        'length' => 1,
        'unit' => 'yearly',
        'string' => '1 year',
        'unit_gc' => 'yearly',
      );
      break;

    case 'Monthly':
      $interval_params = array(
        'length' => 1,
        'unit' => 'month',
        'string' => '1 month',
        'unit_gc' => 'monthly',
      );
      break;

    case 'Weekly':
      $interval_params = array(
        'length' => 1,
        'unit' => 'week',
        'string' => '1 week',
        'unit_gc' => 'weekly',
      );
      break;

    case 'Fortnightly':
      $interval_params = array(
        'length' => 2,
        'unit' => 'week',
        'string' => '2 week',
        'unit_gc' => 'weekly',
      );
      break;

    default:
      $interval_params = array(
        'length' => variable_get('uc_gc_client_interval_length'),
        'unit' => variable_get('uc_gc_client_interval_unit'),
      );
      break;
  }
  return $interval_params;
}

/**
 * Implements hook_uc_order_pane().
 */
function uc_gc_client_uc_order_pane() {

  $panes['cancel_button'] = array(
    'callback' => 'uc_gc_client_pane_cancel_button',
    'title' => t('Cancel mandate button'),
    'display title' => '',
    'desc' => t("Button to cancel GoCardless subscription."),
    'class' => 'abs-left',
    'weight' => 10,
    'show' => array('customer', 'view'),
  );
  $panes['gc_client'] = array(
    'callback' => 'uc_gc_client_uc_order_pane_callback',
    'title' => t('Go Cardless'),
    'desc' => t('Information on GoCardless order'),
    'class' => 'pos-left',
    'weight' => 4,
    'show' => array('view', 'edit'),
  );
  return $panes;
}

/**
 * Provides the "GoCardless" pane in an order's admin view pane.
 */
function uc_gc_client_uc_order_pane_callback($op, $order) {

  switch ($op) {

    case 'view':

      // Todo this doesn't work if there is more than one product in order.
      $query = db_select('uc_gc_client', 'g');
      $gc = $query
        ->fields('g')
        ->condition('ucid', $order->order_id, '=')
        ->execute()->fetch();

      $build = 'Mandate ID: ' . $gc->gcid . '<br />';
      $build .= 'Created: ' . format_date($gc->created, 'uc_store') . '<br />';
      $gc->status == 'completed' ? $status = 'Active' : $status = $gc->status;
      $build .= 'Status: ' . $status . '<br />';
      $gc->type == 'P' ? $type = 'Payments' : $type = 'Subscription';
      $build .= 'Type: ' . $type . '<br />';
      !is_null($gc->start_date) ? $start = format_date($gc->start_date, 'uc_store') . '<br />' : $start = 'Not set<br />';
      $build .= 'Start: ' . $start;

      if (isset($order->products[$gc->ucpid]->data['interval_params'])) {
        $params = $order->products[$gc->ucpid]->data['interval_params'];
        $interval = $params['length'] . ' ' . $params['unit'];
      }
      else {
        $interval = 'Not set';
      }
      $build .= 'Payment Interval: ' . $interval . '<br />';

      if ($gc->status != 'canceled' && $gc->type == 'P') {

        !is_null($gc->next_payment) ? $next_payment = format_date($gc->next_payment) . '<br />' : $next_payment = 'Not set<br />';
        $build .= 'Next payment creation: ' . $next_payment;
      }

      return array('#markup' => $build);
  }
}

/**
 * Handles the "Cancel button" order pane.
 */
function uc_gc_client_pane_cancel_button($op, $order, &$form = NULL, &$form_state = NULL) {

  switch ($op) {
    case 'customer':
      if (user_access('view own invoices')) {
        return drupal_get_form('uc_gc_client_pane_cancel_form', $order);
      }
      //case 'view':
      //if (user_access('view own invoices')) {
      //return drupal_get_form('uc_gc_client_pane_cancel_form', $order);
      //}
  }
}

/**
 * Adds a form with a cancel button.
 */
function uc_gc_client_pane_cancel_form($form, &$form_state, $order) {
  if ($order->order_status <> 'canceled') {
    $form['order'] = array(
      '#value' => $order,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel GoCardless mandate'),
      '#attributes' => array('onclick' => 'if (!confirm("Are you sure you want to cancel the direct debit mandate? This action cannot be undone.")) {return FALSE;}'),
    );
    return $form;
  }
}

/**
 * Implements hook_form_submit().
 *
 * Submit function for the cancel button form.
 */
function uc_gc_client_pane_cancel_form_submit($form, &$form_state) {

  $order = $form['order']['#value'];
  uc_order_update_status($order->order_id, 'canceled');
}

/**
 * Implements hook_cron().
 *
 * If next_payment date is in the past create a new payment and
 * update next_payment.
 */
function uc_gc_client_cron() {

  // Get list of active orders where next_payment is in the past.
  $payments = db_select('uc_gc_client', 'g')
    ->fields('g', array('ucid', 'ucpid', 'gcid', 'uid', 'next_payment'))
    ->condition('type', 'S', '!=')
    ->condition('status', 'canceled', '!=')
    ->condition('next_payment', REQUEST_TIME, '<=')
    ->execute()
    ->fetchAll();
  
  $payment_limit = variable_get('uc_gc_client_payment_limit', 0);

  foreach ($payments as $payment) {

    // Check status of the mandate, do not create payment if it is cancelled.
    $order = uc_order_load($payment->ucid);
    $params = array(
      'endpoint' => 'mandates',
      'action' => 'get',
      'mandate' => $payment->gcid,
    );
    $result = uc_gc_client_api($params);

    if (isset($result->response)) $mandate = $result->response->body->mandates;
    if (!isset($mandate) || in_array($mandate->status, array('cancelled','failed'))) {
      $watchdog = t('Order #@ucid: Payment creation error.', array('@ucid' => $payment->ucid,));
      watchdog('uc_gc_client', $watchdog, NULL, WATCHDOG_ERROR);
      continue;
    }

    // Calculate amount.
    $next_paymentdate = date('D d M Y', $payment->next_payment);
    $calculate = uc_gc_client_price_calculate($order, $payment->ucpid, $next_paymentdate, $status = 1);
    $amount = $calculate['amount'];
    $currency_code = isset($calculate['currency']) ? $calculate['currency'] : variable_get('uc_currency_code');
    $currency_sign = isset($calculate['sign']) ? $calculate['sign'] : variable_get('uc_currency_sign');

    // Make sure daily payment limit hasn't been exceeded.
    if (!empty($payment_limit) && $payment_limit != 0) {

      $params = array(
        'endpoint' => 'payments',
        'action' => 'list',
        'mandate' => $payment->gcid,
        'created_at_on_after' => date('c', strtotime('midnight')),
      );
      $result = uc_gc_client_api($params);
      $pays = $result->response->body->payments;
      $count = 0;
      foreach ($pays as $pay) {
        if (isset($pay->metadata->ucpid)) {
          if ($pay->metadata->ucpid == $payment->ucpid) {
            $count++;
          }
        }
      }

      if ($count >= $payment_limit) {

        $message = t("Payment for @amount has not been raised because the daily payment limit of @payment_limit has been exceeded for the order.", array('@amount' => uc_currency_format($amount, $currency_sign), '@payment_limit' => $payment_limit));
        uc_order_comment_save($order->order_id, $order->uid, $message, 'order');

        $watchdog_array = array(
          '@amount' => uc_currency_format($amount, $currency_sign),
          '@order_id' => $order->order_id,
          '@uid' => $order->uid,
          '@payment_limit' => $payment_limit,
        );
        $watchdog = t("Bill for @amount for order #@order_id has not been raised on user #@uid's account because the daily payment limit of @payment_limit has been exceeded.", $watchdog_array);
        watchdog('uc_gc_client', $watchdog, array(), WATCHDOG_WARNING);

        // Send a warning email to admin.
        $to_customer = variable_get('uc_gc_client_warnings_email');
        $params = array(
          'order_id' => $order->order_id,
          'payment_limit' => $payment_limit,
          'amount' => uc_currency_format($amount, $currency_sign),
        );
        drupal_mail('uc_gc_client', 'payment-limit-reached', $to_customer, language_default(), $params);

        continue;
      }
    }

    $payment_details = array(
      'amount' => $amount,
      'name' => $calculate['name'],
    );

    // Provide a hook so that payment details can be altered by another module.
    drupal_alter('payment_details', $payment_details, $order);     
    $amount = $payment_details['amount'];
    $name = $payment_details['name'];

    // Validate the payment amount before creating.
    if ($amount < 1 && $amount != 0) {
      $message = t("Payment for @amount has not been created because it is less than @minimum.", array('@minimum' => uc_currency_format(1, $currency_sign), '@amount' => uc_currency_format($amount, $currency_sign)));
      uc_order_comment_save($order->order_id, $order->uid, $message, 'order');

      $watchdog = t("Payment for @amount for order #@order_id has not been created on user #@uid's account because it is less than @minimum.", array('@minimum' => uc_currency_format(1, $currency_sign), '@amount' => uc_currency_format($amount, $currency_sign), '@order_id' => $order->order_id, '@uid' => $order->uid));
      watchdog('uc_gc_client', $watchdog, array(), WATCHDOG_WARNING);

      // Send a warning email to admin.
      $to_customer = variable_get('uc_gc_client_warnings_email');
      $params = array('order_id' => $order->order_id);
      drupal_mail('uc_gc_client', 'payment-less-than-one', $to_customer, language_default(), $params);
    }

    elseif ($amount == 0) {
      $message = t("No payment raised because scheduled amount is @sign0.", array('@sign' => $currency_sign));
      uc_order_comment_save($order->order_id, $order->uid, $message, 'order');

      $watchdog = t("No payment raised for order #@order_id on user #@uid's account because the amount is @sign0.", array('@order_id' => $order->order_id, '@uid' => $order->uid, '@sign' => $currency_sign));
      watchdog('uc_gc_client', $watchdog, array(), WATCHDOG_WARNING);
    }

    else {
      // Create the payment.
      $params = array(
        'endpoint' => 'payments',
        'action' => 'create',
        'mandate' => $payment->gcid,
        'amount' => $amount,
        'currency' => $currency_code,
        'description' => $name,
        'metadata' => array(
          'ucpid' => $payment->ucpid,
        ),
      );
      $result = uc_gc_client_api($params);
      $payment_created = $result->response->body->payments;

      $comment = t('Payment for @amount has been created with GoCardless and will be made from your account on @charge_date.', array('@amount' => uc_currency_format($amount, $currency_sign), '@charge_date' => format_date(strtotime($payment_created->charge_date), 'uc_store')));
      uc_order_comment_save($order->order_id, $order->uid, $comment, 'order', 'Pending', TRUE);

      $watchdog = "Bill for @amount for order #@order_id has been raised with GoCardless and will be taken from user #@uid's account on @charge_date.";
      watchdog('uc_gc_client', $watchdog, array('@amount' => uc_currency_format($amount, $currency_sign), '@order_id' => $order->order_id, '@uid' => $order->uid, '@charge_date' => format_date(strtotime($payment_created->charge_date), 'uc_store')), WATCHDOG_INFO);

      // Provide a hook so that other modules can respond to payment creation.
      module_invoke_all('payment_created', $payment_created, $order->order_id);     
    }

    // Update next_payment field in uc_gc_client table.
    $product = $order->products[$payment->ucpid];
    $string = '+' . $product->data['interval_params']['string'];
    $next_payment = strtotime($string, $payment->next_payment);

    // Provide a hook so that next_payment can be altered by another module.
    drupal_alter('next_payment', $next_payment, $order);

    $update = db_update('uc_gc_client')
      ->fields(array(
        'next_payment' => $next_payment,
        'updated' => REQUEST_TIME,
      ))
      ->condition('ucpid', $payment->ucpid)
      ->execute();

    // Update status field in uc_gc_client_schedules table.
    $update = db_update('uc_gc_client_schedules')
      ->fields(array(
        'status' => 2,
        // 'status' => 1, // Use for debugging.
      ))
      ->condition('type', 'adjustment')
      ->condition('date', $next_paymentdate)
      ->condition('ucpid', $payment->ucpid)
      ->execute();
  }
}

/**
 * Returns the price of an order modified by the multiplier and other factors.
 */
function uc_gc_client_price_calculate($order, $ucpid, $next_paymentdate, $status, $data = FALSE) {

  //Process scheduled adjustments. 
  $query = db_select('uc_gc_client_schedules', 's');
  $query->join('uc_gc_client_schedules_adjs', 'a', 'a.sid = s.sid');
  $adjustments = $query
    ->fields('s', array('sid', 'date', 'status'))
    ->fields('a', array('title', 'amount', 'aid'))
    ->condition('s.status', $status)
    ->condition('s.date', $next_paymentdate)
    ->condition('type', 'adjustment')
    ->condition('ucpid', $ucpid)
    ->orderBy('timestamp', 'ASC')
    ->execute()->fetchAll();

  $calcs_array = array();
  $adjs_total = 0;
  foreach ($adjustments as $adj) {

    // Todo Ensure this will not break if 2 adjustments on same date have same
    // title.
    $calcs_arr['adjs'][$adj->title] = $adj->amount;
    $adjs_total = $adjs_total + $adj->amount;
  }

  //Factor in price multiplier
  $product = $order->products[$ucpid];
  if (isset($product->data['price_x'])) {
    !is_null($product->data['price_x']) ? $price_x = $product->data['price_x'] : $price_x = 1;
  }
  else {
    $price_x = 1;
  }

  //Process line items.
  $line_items = 0;

  //If there is just one product in the order we can safely add the total of the line items to 
  //the amount.
  if($order->product_count == 1) {
    foreach($order->line_items as $item) {
      if($item['type'] == 'subtotal') continue;
      $line_items = $line_items + $item['amount'];
    }
  }

  //Todo add extra rules here for handling line item amounts

  
  $data ? $amount = $data['amount'] : $amount = $product->price;
  $amount = ($amount + $adjs_total + $line_items) * $price_x;

  //Modify payment amount and currency if international customer
  if (variable_get('uc_gc_client_currencies')) {
    $default_currency = variable_get('uc_currency_code');

    !empty($order->billing_country) ? $country_code = $order->billing_country : $country_code = $order->delivery_country;
    $currency_arr = uc_gc_client_currency($country_code);

    if ($default_currency != $currency_arr['currency']) {
      $url = "http://api.fixer.io/latest?base=" . $default_currency . "&symbols=" . $currency_arr['currency'];
      $options = array(
        'headers' => array('Content-Type' => 'application/json',),
        'method' => 'GET',
      );
      $result = drupal_http_request($url, $options);

      if(isset($result->error)) {
        drupal_set_message(t('We were unable to obtain a currency exchange rate at this time'), 'warning');
      }
      else {
        $data = json_decode($result->data);
        $exchange_rate = $data->rates->$currency_arr['currency'];
        $amount = $amount * $exchange_rate;
        drupal_set_message(t('The amount for your purchase has been converted into @sign using current exchange rates at fixer.io', array('@sign' => $currency_arr['sign'])));
      }
      $calcs_arr['currency'] = $currency_arr['currency'];
      $calcs_arr['sign'] = $currency_arr['sign'];
    } 
  }
  $calcs_arr['name'] = 'Payment for Order #' . $order->order_id;
  $calcs_arr['price'] = $product->price;
  $calcs_arr['adjs_total'] = $adjs_total;
  $calcs_arr['price_x'] = $price_x;
  $calcs_arr['amount'] = number_format(check_plain($amount, "number"), 2, '.', '');

  return $calcs_arr;
}

/**
 * Implements hook_uc_order_product_delete().
 */
/*
function uc_gc_client_uc_order_product_delete($order_product) {

  $ucid = $order_product->order_id;

  // Delete record from gc_client table if there is one for the order.
  $db_delete = db_delete('uc_gc_client')
    ->condition('ucid', $ucid, '=')
    ->execute();
}
*/

/**
 * Implements hook_mail().
 */
function uc_gc_client_mail($key, &$message, $params) {

  global $base_url;
  $order_url = $base_url . '/admin/store/orders/' . $params['order_id'];
  $link = t('order <a href="@url">#@order_id</a>', array('@order_id' => $params['order_id'], '@url' => $order_url));
  $message_arr = array(
    '@link' => $link,
    '@order_url' => $order_url,
    '@order_id' => $params['order_id'],
    '@payment_limit' => isset($params['payment_limit']) ? $params['payment_limit'] : NULL,
    '@amount' => isset($params['amount']) ? $params['amount'] : NULL,
    '@sign' => variable_get('uc_currency_sign'),
  );

  switch ($key) {

    case 'payment-less-than-one':
      $message['subject'] = "A payment's Amount was less than @sign1 !";
      $message['body'][] = t("<p>A payment for order <a href='@order_url'>#@order_id</a> has failed because it's amount was less than @sign1.</p>", $message_arr);
      break;

    case 'payment-limit-reached':
      $message['subject'] = "The daily payment limit has been exceeded for an order!";
      $message['body'][] = t("<p>A payment of @amount for order <a href='@order_url'>#@order_id</a> could not be raised because the daily automatic limit of @payment_limit has been exceeded.</p>", $message_arr);
      break;
  }

}

/**
 * Implements hook_mail_alter().
 */
function uc_gc_client_mail_alter(&$message) {
  switch ($message['key']) {
    case 'payment-limit-reached':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;

    case 'payment-less-than-one':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }
}

/**
 * Implements hook_uc_order().
 */
function uc_gc_client_uc_order($op, $order, $arg2) {

  switch ($op) {

    case 'update' :
      if ($arg2 == 'canceled') uc_gc_client_uc_order_cancel($order);
      break;

    case 'delete' :
      uc_gc_client_uc_order_delete($order);
      break;
  }
}

/**
 * Removes records from the database upon deletion of an order.
 */
function uc_gc_client_uc_order_delete($order) {

  // Cancel GoCardless mandate first if order status is not canceled.
  if ($order->order_status != 'canceled') uc_gc_client_uc_order_cancel($order); 

  db_delete('uc_gc_client')
    ->condition('ucid', $order->order_id)
    ->execute();

  $aid = db_delete('uc_gc_client_schedules')
    ->condition('ucid', $order->order_id)
    ->execute();

  db_delete('uc_gc_client_schedules_adjs')
    ->condition('aid', $aid)
    ->execute();
}

/**
 * Cancels a GC mandate upon cancelling an order.
 */
function uc_gc_client_uc_order_cancel($order) {

  $gc_client = db_select('uc_gc_client', 'c')
    ->fields('c')
    ->condition('ucid', $order->order_id)
    ->condition('status', 'canceled', '!=')
    ->execute()->fetch();

  if (empty($gc_client)) return;

  $params = array(
    'endpoint' => 'mandates',
    'action' => 'cancel',
    'mandate' => $gc_client->gcid,
  );
  $result = uc_gc_client_api($params);

  if (!isset($result->response)) {
    drupal_set_message(t('Something went wrong cancelling GoCardless direct debit mandate @ucid. Please try again or contact the site administrator for assistance.', array('@ucid' => $gc_client->gcid)), 'error');
  }
  elseif ($result->response->status_code == 200) {
    // Update status on database for all products in order.
    $update = db_update('uc_gc_client')
      ->fields(array(
        'status' => 'canceled',
        'updated' => REQUEST_TIME,
      ))
      ->condition('ucid', $order->order_id)
      ->execute();

    $comment = t('Order @order_id cancelled by customer.', array('@order_id' => $order->order_id));
    uc_order_comment_save($order->order_id, $order->uid, $comment, 'order', 'Canceled', TRUE);
    drupal_set_message(t('Your GoCardless direct debit mandate @ucid has been cancelled, and you will receive an email confirmation.', array('@ucid' => $gc_client->gcid)));
  }
}

/**
 * Get the Ubercart order ID from database using mandate ID from GoCardless.
 */
function uc_gc_client_id($gcid) {

  $order_id = db_query("SELECT ucid FROM {uc_gc_client} where gcid = :gc_order_id", array(':gc_order_id' => $gcid))->fetchField();
  return $order_id;
}

/**
 * Returns a date calculated as working days from the date provided.
 *
 * @Todo
 * This function will malfunction if there is a bank holiday(s) within the
 * specified range of days
 */
function uc_gc_client_working_days_calculate($op, $days, $date) {

  $x = 1;
  $string = $op . '1 day';
  while ($x <= $days) {
    $date = date('Y-m-d', strtotime($string, strtotime($date)));
    if (!in_array(date('D', strtotime($date)), array('Sat', 'Sun'))) {
      $x++;
    }
  }
  return $date;
}

/**
 * Validates a form entry as a positive number.
 */
function element_validate_positive_number($element, &$form_state) {
  $value = $element['#value'];
  if (($value != '' && !is_numeric($value)) ||
      (is_numeric($value) && $value <= 0)) {
    form_error($element, t('%name must be a positive number.', array('%name' => $element['#title'])));
  }
}

/**
 * Validates a form entry as either a zero or a positive number.
 */
function gc_client_element_validate_integer_positive_zero($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    form_error($element, t('%name must be a positive integer.', array('%name' => $element['#title'])));
  }
}

/**
 * Returns currency information.
 *
 * @param $country_code
 *   The country either as an ISO Numeric code or a ISO ALPHA-2 code.
 * @return array
 *   Array including currency code and symbol.
 */
function uc_gc_client_currency($country_code) {

  //$countries = uc_gc_client_countries_define();
  $countries = variable_get('uc_gc_client_countries');

  if(is_numeric($country_code)) {
    $country_code = db_select('uc_countries', 'c')
      ->fields('c', array('country_iso_code_2'))
      ->condition('country_id', $country_code)
      ->execute()->fetchField();
  }
  if(isset($countries[$country_code])) {
    return array(
      'currency' => $countries[$country_code]['currency'],
      'sign' => $countries[$country_code]['sign'],
    );
  }
  else return;
}

/**
 * Formats an amount for display with the required currency sign. 
 *
 * @param $country_code
 *   The country either as an ISO Numeric code or a ISO ALPHA-2 code.
 * @see uc_curency_format()
 *
 * @return
 *   String containing price formatted with currency symbol and separators.
 */
function uc_gc_client_currency_format($value, $country_code, $thou = NULL, $dec = NULL) {

  $sign = uc_gc_client_currency($country_code)['sign'];
  return uc_currency_format($value, $sign, $thou = NULL, $dec = NULL); 
}

/**
 * Defines an array of countries, currency codes, and GC regions.
 */
function uc_gc_client_countries_define() {

  $countries = array(
    'GB' => array(
      'region' => 'bacs',
      'currency' => 'GBP',
      'sign' => '£',
      'enabled' => '1',
    ),
    'SE' => array(
      'region' => 'autogiro',
      'currency' => 'SEK',
      'sign' => 'kr',
      'enabled' => '0',
    ),
    'AX' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'AT' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'BE' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'CY' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'EE' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'FI' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'FR' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'GF' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'DE' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'GR' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'GP' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'IE' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'IT' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'LV' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'LT' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'LU' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'MT' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'MQ' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'YT' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'MC' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'NL' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'PT' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'RE' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'BL' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'MF' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'PM' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'SM' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'SK' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'SI' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
    'ES' => array(
      'region' => 'sepa_core',
      'currency' => 'EUR',
      'sign' => '€',
      'enabled' => '0',
    ),
  );
  return $countries;  
}

